import { getSession, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import React, { useEffect, useState } from "react";
import Header from "../components/Header";
import Sidebar from "../components/Sidebar";
import useSpotify from "../hooks/useSpotify";
import { countries } from "country-data";
import styles from "../styles/effects.module.css";
import { DotPulse } from "@uiball/loaders";
import Song from "../components/Song";

export default function profile() {
  const [profile, setProfile] = useState({});
  const [recentSongs, setRecentSongs] = useState([]);

  const [songsLimit, setSongsLimit] = useState(5);

  const { data: session } = useSession();
  //console.log(session);

  const spotifyApi = useSpotify();

  const getProfileInfo = () => {
    spotifyApi
      .getMe()
      .then((data) => setProfile(data.body))
      .catch((err) => console.log(err));
  };
  useEffect(() => {
    getProfileInfo();
  }, []);

  const [loadingSongsFetch, setLoadingSongsFetch] = useState(true);
  const getRecentSongs = () => {
    setLoadingSongsFetch(true);
    spotifyApi
      .getMyRecentlyPlayedTracks({ limit: songsLimit })
      .then((data) => setRecentSongs(data.body.items))
      .catch((err) => console.log(err))
      .finally(() => setLoadingSongsFetch(false));
  };
  useEffect(() => {
    //WebapiRegularError: An error occurred while communicating with Spotify's Web API.
    //Details: No token provided. -> do a check:  if (spotifyApi.getAccessToken()) ...
    //  if (spotifyApi.getAccessToken()) {
    getRecentSongs();
    //  }
  }, [songsLimit]);

  const [playlists, setPlaylists] = useState([]);
  const getMyPlaylists = () => {
    spotifyApi
      .getUserPlaylists(session?.user?.name)
      .then((data) => setPlaylists(data.body.items))
      .catch((err) => console.log(err));
  };
  useEffect(() => {
    getMyPlaylists();
  }, []);

  const handleLoadMore = () => {
    if (loadingSongsFetch) return;
    //increase loading time
    setLoadingSongsFetch(true);
    setTimeout(() => {
      setSongsLimit((prev) => prev + 5);
    }, 700);
  };

  return (
    <div
      className={`MobileUiFix-> ${
        loadingSongsFetch && recentSongs.length == 0 && "h-screen"
      } pageMobileHeaderTempSol `}
    >
      <Head>
        <title>TrackTrends | {session?.user?.name} </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex justify-between mx-5 mt-6 text-white items-center   ">
        <div className={`flex items-center      `}>
          <div className="relative h-[140px] w-[140px]  xs:h-[200px] xs:w-[200px] rounded-full ">
            <Image
              layout="fill"
              className="rounded-full "
              src={session?.user?.image}
              alt="user-img"
            />
          </div>

          <div className="ml-6   -mt-6">
            <p className="text-sm  ">Profile</p>
            <h1 className="text-3xl sm:text-5xl md:text-7xl font-bold ">
              {session?.user?.name}
            </h1>
            <p className="mt-2.5 text-sm text-white/50">
              {profile?.product} user
            </p>
            {/* <a
              className="inline-block p-2 sm:p-2.5 border border-spotifyGreen rounded-lg mt-3 "
              target="_blank"
              href={profile?.external_urls?.spotify}
            >
              <img
                className="h-[24px] "
                src="/images/Spotify_Logo_CMYK_Green.png"
                alt=""
              />
            </a> */}
          </div>
        </div>
        <div className="text-sm font-semibold space-y-1 hidden md:inline">
          {/* <p className="text-sm opacity-70">
            {countries[profile?.country]?.name}
          </p> */}
          <p className="text-sm opacity-70">
            {profile?.followers?.total}{" "}
            <span className="text-xs ">
              {" "}
              {profile?.followers?.total == 1 ? "follower" : "followers"}
            </span>
          </p>
          <p className="text-sm opacity-70">
            {playlists?.length} <span className="text-xs ">playlists</span>
          </p>
        </div>
      </div>

      <hr className="border-[1.5px] border-gray-600  mx-5 my-4  " />
      <h2
        //onClick={() => console.log(recentSongs)}
        className="text-white text-xl ml-5 mb-1"
      >
        Recently Played
      </h2>
      <div className="mx-5">
        {recentSongs
          ?.filter((track) => track.preview_url !== null)
          .map(({ track }, i) => (
            <Song key={i} nr={i + 1} wideDesign track={track} />
          ))}
      </div>

      {/* LOAD MORE button */}
      {songsLimit < 21 && (
        <div className="flex justify-center relative">
          <button
            aria-label="ignore-pause"
            onClick={handleLoadMore}
            className={`text-gray-600 font-bold text-center my-2 cursor-pointer  ${
              loadingSongsFetch && "hidden/ opacity-0"
            } ${styles.noHighLight} `}
          >
            Load more
          </button>
          <div
            className={`z-30 absolute mt-4 ${!loadingSongsFetch && "hidden"}  `}
          >
            <DotPulse /* size={150} */ speed={0.9} color="white" />
          </div>
        </div>
      )}
    </div>
  );
}

//(when refreshing the page -> data is not shown. solution) ->
//onload issue -> pre-fetch the session / pre render the user -> data is shown.
export async function getServerSideProps(context) {
  const session = await getSession(context);
  return {
    props: {
      session,
    },
  };
}
