import { PlusIcon, TrashIcon } from "@heroicons/react/24/solid";
import Head from "next/head";
import React, { useState } from "react";
import { Tooltip } from "react-tooltip";
import styles from "../styles/tooltip.module.css";
import { useDispatch, useSelector } from "react-redux";
import { selectItems as selectFavoritedItmes } from "../slices/favoritesSlice";
import { getSession, useSession } from "next-auth/react";
import { emptyFavorites } from "../slices/favoritesSlice";
import { /* toast */ Toaster } from "react-hot-toast";
import Song from "../components/Song";
import Modal from "../components/Modal";
import effectsStyles from "../styles/effects.module.css";

function favoritedTracks() {
  const [openNewPlaylistModal, setOpenNewPlaylistModal] = useState(false);

  const { data: session } = useSession();
  const favoritedItems = useSelector(selectFavoritedItmes);
  const dispatch = useDispatch();

  return (
    <div
      className={` ${
        favoritedItems.length < 2 && "h-screen"
      }  pageMobileHeaderTempSol `}
    >
      <Head>
        <title>TrackTrends: Favorited Songs</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <Sidebar /> */}

      {/* <div className=" w-screen bg-bodyBackground  overflow-y-scroll   "> */}
      <Toaster position="top-center" />
      {/* <Header /> */}

      <h1
        onClick={() => console.log(favoritedItems)}
        className="text-xl xxs:text-2xl text-white/50 text-center uppercase tracking-tight"
      >
        favorited songs
      </h1>

      <Modal
        openNewPlaylistModal={openNewPlaylistModal}
        setOpenNewPlaylistModal={setOpenNewPlaylistModal}
        favoritedItems={favoritedItems}
      />

      <button
        onClick={() => setOpenNewPlaylistModal((prev) => !prev)}
        data-tooltip-id="create"
        className={`connectingToTooltip: create ${
          favoritedItems.length > 0 && "hover:scale-105"
        } 
        ${
          effectsStyles.noHighLight
        } bottom-20 right-4 xxs:bottom-4 fixed     first: z-[55] rounded-full p-4 bg-spotifyGreen transform transition duration-200 ease-in  `}
      >
        <PlusIcon className="h-9 w-9 text-white" />
      </button>

      <TrashIcon
        onClick={() => dispatch(emptyFavorites())}
        data-tooltip-id="trash"
        className={` trash ${
          favoritedItems == 0 && "hidden"
        }  bottom-24 xxs:bottom-5   h-8 w-8 fixed cursor-pointer z-[55]  ml-4 text-white transform transition duration-200 ease-in hover:scale-105`}
      />
      <Tooltip
        content="Clear all songs"
        className={`${styles.bottomButton}`}
        anchorSelect=".trash"
        delayShow={300}
      />

      <div className="   !mx-5 gap-3 my-3 grid grid-cols-1 xs:grid-cols-2  md:grid-cols-3 /mdlg:grid-cols-4 /lg:grid-cols-5 md:mx-auto   /lg:mx-auto lg:px-2 /max-w-4xl ">
        {favoritedItems?.map((track, i) => (
          <Song key={i} track={track} noPlay />
        ))}
      </div>
      {/* </div> */}
    </div>
  );
}

export default favoritedTracks;

//onload issue -> pre-fetch the session / pre render the user ->
export async function getServerSideProps(context) {
  const session = await getSession(context);
  return {
    props: {
      session,
    },
  };
}
